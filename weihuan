#include <iostream>
using namespace std;
#define SIZE 50

class Sports
{
    private:
        string sportName, teamName;
    
    public:
        Sports(string teamname = "", string name = "") : teamName(teamname), sportName(name){}

        void setSName(string sport_name){
            sportName = sport_name;
        }
        
        string getSName(){
            return sportName;
        }
        
        string getTeamName(){
        	return teamName;
		}
		
		void setTeamName(string nameTeam){
            teamName = nameTeam;
        }
        
        virtual void print(){
			cout << "Sport Name : " << sportName << endl;
		}
		
        //virtual void setNumPlayers(int n);

};

class Single: public Sports
{
    public:
        Single(){}
        Single(string sName, string teamN): Sports(teamN, sName){}
        
        void print(){
        	Sports::print();
			cout << "Type of Sport : Single" << endl;
			
        }
};

class Team: public Sports
{
    public:
        Team(string TName = "", string sName = ""): Sports(TName, sName){}
        
		/*void setnumPlayer(int numP){
            numPlayer = numP;
        }*/
          
        /*void setNumPlayers(int n){
            numPlayer = n;
        }*/
        
        void print(){
			Sports::print();
			cout << "Type of Sport : Team" << endl;
            cout << "Team's Name : " << Sports::getTeamName() << endl;
        }
};

class Name{
    string firstName, lastName; 

    public:
        Name(string firstName = " ", string lastName = " "){
            this->firstName = firstName;
            this->lastName = lastName;
        }

        string getFirstName(){
            return firstName;
        }

        string getLastName(){
            return lastName;
        }       
		
};

class PreferredEquipment{
    string manufacturer, model;
    double price, rating;

    public:
        PreferredEquipment(string _manufacturer = " ", string _model = " ", double _price = 0, double _rating = 0){
            manufacturer = _manufacturer;
            model = _model;
            price = _price;
            rating = _rating; 
        }
    
        string getManufacturer(){
            return manufacturer;
        }

        string getModel(){
            return model;
        }
        
        double getPrice(){
            return price;
        }

        double getRating(){
            return rating;
        }
};

class Athlete{
    private:
        int age, height;
        string bPlace;
        char gender;
        double acPoint;
        Name athleteName;
        PreferredEquipment *p;
        Sports sportsobj;
        
    public:
        Athlete(int _age = 0, int _height = 0, string _bPlace = "", char _gender = 'm', string firstName = "", string lastName = "")
        :athleteName(firstName, lastName), age(_age), height(_height), bPlace(_bPlace), gender(_gender){
            p = NULL;
        }
        int getAge() const {return age;}
        int getHeight() const {return height;}
        char getGender() const {return gender;}
        
        void equipment(PreferredEquipment *equipment){
            p = equipment;
        }
        
        string getEquipmentManufacturer(){
            return p->getManufacturer();
        }
        
        string getEquipmentModel(){
            return p->getModel();
        }
        
        double getEquipmentPrice(){
            return p->getPrice();
        }
        
        double getEquipmentRating(){
            return p->getRating();
        }
        
        void display(){
        	cout << "Name : " << athleteName.getFirstName() << " " << athleteName.getLastName() << endl;
			cout << "Age : " << age << endl;
			cout << "Height : " << height << endl;
			cout << "Gender : " << gender << endl;
			cout << "Birth Place : " << bPlace << endl;
		}
		
		string firstName(){
			return athleteName.getFirstName();
		}
		
		string LastName(){
			return athleteName.getLastName();
		}
};

int sportMenu()
{
    int choice;
    cout << "========== Menu ==========\n"
	<< "[1]. Add athlete\n"
    << "[2]. Search an athlete\n"
    << "[3]. Exit\n" 
	<< "==========================" << endl
	<< "\nEnter your choice : ";
    cin >> choice;
    return choice;
}

int main(){
	string sport, type, bPlace, team, firstName, lastName; 
	int age, select2;
	char gender, ch;
	int numAthlete = 0, numTeamName = 0, numPlayers = 0, count = 1;
	double height;
	int players[SIZE];
	
	Sports *sportsPtr;
	Sports *teamList[SIZE];
	Sports *singleList[SIZE];
	//Name athleteName;
	//Name SnameList[SIZE];
	//Name TnameList[SIZE];
	Athlete *athletePtr;
	Athlete *SathleteList[SIZE];
	Athlete *TathleteList[SIZE];
	
	int select1 = sportMenu();
	
	while(select1 > 0 && select1 < 3){
		switch(select1){
			case 1 : 
				cout << "\n<<< Add Athletes >>>" << endl;
				cin.ignore();
				cout << "Sport Name : ";
				getline(cin, sport);
				cout << "Type (Single / Team) : ";
				cin >> type;
				if(type == "Single"){
        			sportsPtr = new Single(sport, " ");
        			singleList[numAthlete] = sportsPtr;
				}
				else{
					cin.ignore();
					cout << "Team Name : ";
					getline(cin, team);
					cout << "Numbers of players in a team : ";
					cin >> numPlayers;
					cout << endl;
					players[numAthlete] = numPlayers;
					sportsPtr = new Team(team, sport);
					teamList[numAthlete] = sportsPtr;
				}
				
				if(type == "Single"){
					cout << "First Name : ";
					cin.ignore();
					getline(cin, firstName);
					cout << "Last Name : ";
					getline(cin, lastName);
					//SnameList[numAthlete] = athleteName;
					cout << "Age : ";
        			cin >> age;
        			cout << "Height : ";
        			cin >> height;
        			cout << "Gender (M/F) : ";
        			cin >> gender;
    				cin.ignore();
					cout << "Birth Place : ";
        			getline(cin, bPlace);
        			athletePtr = new Athlete(age, height, bPlace, gender, firstName, lastName);
        			SathleteList[numAthlete] = athletePtr;
				}
				else{
					while(numTeamName < numPlayers){
						cout << "#" << count << " Player" << endl;
						count++;
						cout << "First Name : ";
						cin.ignore();
						getline(cin, firstName);
						cout << "Last Name : ";
						getline(cin, lastName);
						//TnameList[numAthlete] = athleteName;
						cout << "Age : ";
        				cin >> age;
        				cout << "Gender (M/F) : ";
        				cin >> gender;
    					cin.ignore();
						cout << "Birth Place : ";
        				getline(cin, bPlace);
        				cout << "Height : ";
        				cin >> height;
        				cout << endl;
        				athletePtr = new Athlete(age, height, bPlace, gender, firstName, lastName);
						TathleteList[numTeamName] = athletePtr;
						numTeamName++; 
					}
				}
				
				count = 1;
				numTeamName = 0;
				numAthlete++;
				break;
				
			case 2 :
				if(numAthlete == 0){
						cout << "Sorry! No athlete is added..." << endl;
						break;
				}
				
				cout << "\n<<< Search Athletes >>>" << endl;
				cout << "Type (Single / Team) : ";
				cin >> type;
				if(type == "Single"){
					for(int i = 0; i < numAthlete; i++){
						cout << i+1 << ") " << SathleteList[i]->firstName() << " " << SathleteList[i]->LastName() << " " << " (" << singleList[i]->getSName() << ")" << endl;
					}
					do{
					cout << "\nEnter the number that the athlete you want to find : ";
					cin >> select2;
					singleList[select2-1]->print(); 
					SathleteList[select2-1]->display();
					cout << endl;
					cout << "Press 'Y' to continue" << endl;
					cin >> ch;
					ch = toupper(ch);
					}while(ch == 'Y');
				}
				else 
					for(int i = 0; i < numAthlete; i++){
						cout << i+1 << ") " << teamList[i]->getTeamName() << " " << " (" << teamList[i]->getSName() << ")" << endl;
					}
					do{
					cout << "\nEnter the number that the team you want to find : ";
					cin >> select2;
					for(int i = 0; i < players[select2-1]; i++ ){
						teamList[select2-1]->print(); 
						TathleteList[i]->display();
						cout << endl;
					}
					cout << "Press 'Y' to continue" << endl;
					cin >> ch;
					ch = toupper(ch);
					}while(ch == 'Y');
				
				
				
				break;

		}
		
		cout << endl;
		select1 = sportMenu();
	}
	
	cout << "\nThank you! :)" << endl;
	
	return 0;
}
